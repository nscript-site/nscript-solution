using System.Text;
using System.Xml.Linq;

namespace NStyles.MeterialIcons.Generator;

internal class Program
{
    static String TemplateText = String.Empty;

    static void Main(string[] args)
    {
        TemplateText = File.ReadAllText("Template.txt");
        GenerateIcons("D:\\Projects\\20_Private_NScript\\NScript.Solution\\avalonia\\nstyles\\source\\NStyles.MeterialIcons.Generator\\svg");
    }

    static void GenerateIcons(string path)
    {
        var sb = new StringBuilder();
        var dir = new DirectoryInfo(path);
        var files = dir.GetFiles("*.svg", SearchOption.AllDirectories);

        sb.AppendLine("// This file is auto-generated by NStyles.MeterialIcons.Generator. Do not edit it manually.");
        sb.AppendLine("using Avalonia.Media;");
        sb.AppendLine();
        sb.AppendLine("namespace NStyles.MeterialIcons;");

        foreach (var file in files)
        {
            var g = Generate(file);
            if (string.IsNullOrEmpty(g) == false)
            {
                sb.AppendLine(g);
            }
        }
        File.WriteAllText("MaterialIcons.cs", sb.ToString());
    }

    internal static string Generate(FileInfo fileInfo)
    {
        Console.WriteLine($"Generating {fileInfo.Name}...");

        var sb = new StringBuilder();
        var name = fileInfo.Name;
        if (name.EndsWith(".svg") == false) return string.Empty;
        name = name.Substring(0, name.Length - 4);
        var terms = name.Split('-');
        foreach(var term in terms)
        {
            sb.Append(char.ToUpper(term[0]));
            sb.Append(term.Substring(1));
        }
        var className = sb.ToString();

        var path = ParsePath(fileInfo.FullName);
        if (string.IsNullOrEmpty(path)) return string.Empty;

        sb.Clear();

        var template = TemplateText.Replace("SearchIcon", $"{className}Icon");
        template = template.Replace("SVGVALUE",path);
        sb.AppendLine(template);
        sb.AppendLine();
        return sb.ToString();
    }

    internal static string ParsePath(string svgFilePath)
    {
        var svgContent = File.ReadAllText(svgFilePath);

        // 解析 SVG 文件
        var svgDocument = XDocument.Parse(svgContent);

        // 提取 <path> 元素的 d 属性值
        var pathElements = svgDocument.Descendants()
                                      .Where(e => e.Name.LocalName == "path");

        foreach (var pathElement in pathElements)
        {
            var dAttribute = pathElement.Attribute("d");
            if (dAttribute != null)
            {
                return dAttribute.Value;
            }
        }

        return string.Empty;
    }
}

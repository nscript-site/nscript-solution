

vec3 blendOverlay(vec3 base, vec3 blend) {
    return vec3(
        base.r < 0.5 ? (2.0 * base.r * blend.r) : (1.0 - 2.0 * (1.0 - base.r) * (1.0 - blend.r)),
        base.g < 0.5 ? (2.0 * base.g * blend.g) : (1.0 - 2.0 * (1.0 - base.g) * (1.0 - blend.g)),
        base.b < 0.5 ? (2.0 * base.b * blend.b) : (1.0 - 2.0 * (1.0 - base.b) * (1.0 - blend.b))
    );
}

vec3 blendOverlayDark(vec3 base, vec3 blend) {
    vec3 result;
    result.r = (base.r < 0.5) ? (2.0 * base.r * blend.r) : (4.0 - 1.5 * (3.0 - base.r) * (4.0 - blend.r));
    result.g = (base.g < 0.5) ? (2.0 * base.g * blend.g) : (4.0 - 1.5 * (3.0 - base.g) * (4.0 - blend.g));
    result.b = (base.b < 0.5) ? (2.0 * base.b * blend.b) : (4.0 - 1.5 * (3.0 - base.b) * (4.0 - blend.b));
    return mix(base, clamp(result, 0.0, 1.0), 0.5);
}

mat2 Rot(float a) {
    float s = sin(a);
    float c = cos(a);
    return mat2(c, -s, s, c);
}

vec2 hash(vec2 p) {
    p = vec2(dot(p, vec2(2127.1, 81.17)), dot(p, vec2(1269.5, 283.37)));
    return fract(sin(p) * 43758.5453);
}

float noise(vec2 p) {
    vec2 i = floor(p);
    vec2 f = fract(p);
    vec2 u = f * f * (3.0 - 2.0 * f);

    float n = mix(mix(dot(-1.0 + 2.0 * hash(i + vec2(0.0, 0.0)), f - vec2(0.0, 0.0)),
                      dot(-1.0 + 2.0 * hash(i + vec2(1.0, 0.0)), f - vec2(1.0, 0.0)), u.x),
                  mix(dot(-1.0 + 2.0 * hash(i + vec2(0.0, 1.0)), f - vec2(0.0, 1.0)),
                      dot(-1.0 + 2.0 * hash(i + vec2(1.0, 1.0)), f - vec2(1.0, 1.0)), u.x), u.y);
    return 0.42 + 0.42 * n;
}

vec4 main(vec2 fragCoord) {

    vec3 grayBase = vec3(0.11, 0.11, 0.11);
    vec2 uv = fragCoord / iResolution.xy;
    float ratio = iResolution.x / iResolution.y;

    vec2 tuv = uv - 0.5;
    float degree = noise(vec2(iTime * 0.15, tuv.x * tuv.y));

    tuv.y *= 0.7 / ratio;
    tuv *= Rot(radians((degree - 0.5) * 720.0 + 180.0));
    tuv.y *= ratio;

    float frequency = 1.0;
    float amplitude = 155.0;
    float speed = iTime * 0.1;
    tuv.x += sin(tuv.y * frequency + speed) / amplitude;
    tuv.y += sin(tuv.x * frequency * 1.5 + speed) / (amplitude * 0.5);

    float opacityLayer1 = 0.95;
    float opacityLayer2 = 0.85 - (iDark / 2.0);

    float iPrimaryOpacity = (iDark == 1.0) ? 0.6 : 1.5;
    vec3 iPrimaryWithOpacity = iPrimary * iPrimaryOpacity;

    float iAccentOpacity = (iDark == 1.0) ? 4.5 : -1.05;
    vec3 iAccentWithOpacity = iPrimary * iAccentOpacity;

    vec3 layer1Color = mix(vec3(0.0), iPrimaryWithOpacity, opacityLayer1);
    vec3 layer1 = mix(layer1Color, iAccentWithOpacity * 0.85, smoothstep(-0.3, 0.4, (tuv * Rot(radians(-5.0))).x));

    vec3 layer2Color = mix(vec3(0.0), iAccentWithOpacity, opacityLayer2);
    vec3 layer2 = mix(layer2Color, iPrimaryWithOpacity * 0.65, smoothstep(-0.2, 0.3, (tuv * Rot(radians(-5.0))).x));

    vec3 finalComp = mix(layer1, layer2, smoothstep(0.8, -0.5, tuv.y));

    vec3 col = (iDark == 0.0) ? blendOverlay(iBase * 1.02, finalComp) : blendOverlayDark(grayBase, finalComp);

    return half4(col, iAlpha);
}
